import os
import sys
import socket
import node_operation as no
from py2neo import Graph, Node, NodeMatcher

sys.path.append(os.path.dirname(sys.path[0]))
import config
setting=config.args()
settings=setting.set

listen_ip=settings["listen_ip"]
listen_port=settings["neo_listen_Ray"]
ray_ip=settings["central_ip"]
ray_port=settings["neo_send_Ray"]

download_path=settings["download_path"]
temp="..\\temp\\"

result_holder=["0"]

def call_ray():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ###########
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    ###########
    try:
        # ¿¿¿¿¿¿
        print("¿¿¿¿")
        sock.connect((ray_ip, ray_port))
        # ¿¿¿¿¿¿¿¿
        sock.sendall("Success".encode("utf-8"))
        print("¿¿neo4j¿¿¿¿¿¿")
        if_success = result_holder[0]
    except Exception as e:
        print("¿¿¿¿¿¿¿¿¿:", str(e))
    finally:
        # ¿¿¿¿¿
        sock.close()

def neo_driver():
    # Neo4j¿¿¿¿¿¿¿¿¿¿¿¿
    uri = "bolt://localhost:7687"
    # ¿¿¿¿¿¿
    user = "neo4j"
    password = "vivo5000"
    # ¿¿Neo4j¿¿¿¿¿
    graph= Graph(uri, auth=(user, password))
    return graph

if __name__ == "__main__":
    graph=neo_driver()
    matcher = NodeMatcher(graph)
    # event=threading.Event()
    print("¿¿¿¿neo4j¿driver")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        sock.bind((listen_ip, listen_port))
        sock.listen(1)
        print("neo¿¿¿¿...")

        while(True):
            receive_data = b""
            conn, addr = sock.accept()
            print("neo¿¿¿¿¿:", addr)
            # ¿¿¿¿
            while True:
                chunk = conn.recv(4096)
                if not chunk:
                    break
                # print("----Check----:",chunk)
                receive_data += chunk
            receive_data = receive_data.decode("utf-8")
            split_char = "%$$%@#!#(*%^&%"
            data_temp=receive_data
            command=data_temp.split(split_char)[0]
            conn.close()
            print("neo¿¿¿¿¿¿")
            print("     ---Check---:receive_data:"+receive_data)
            if command != "Commit":
                with open(temp+"temp.temp", "wb") as file:
                    file.write(receive_data.encode("utf-8"))
                print("¿¿¿¿¿¿")
                call_ray()
            else:
                with open(temp+"temp.temp", "r") as file:
                    cache_data=file.read()
                print("¿¿¿¿¿¿")
                split_char = "%$$%@#!#(*%^&%"
                cache_command=cache_data.split(split_char)[0]
                filename=cache_data.split(split_char)[1]
                fileid=cache_data.split(split_char)[3]
                if cache_command == "Upload":
                    tags=cache_data.split(split_char)[2]
                    tags=eval(tags)
                    print("     ----Check----tags_num:" + str(len(tags)))
                    print("     ----Check----tags:"+str(tags))
                    # ¿¿¿¿
                    nodes = [Node("File",name=filename,fileid=fileid)]
                    file_precreate_nodes=[]
                    for tag in tags:
                        node_match = matcher.match("Tag",name=tag[0])
                        if len(node_match) != 0:
                            file_precreate_nodes.append(node_match)
                            continue
                        nodes.append(Node("Tag",name=tag[0]))
                    print("     ----Check----nodes_num:"+str(len(nodes)))
                    file_create_node_id=no.create_nodes(graph,nodes)
                    for nodes in file_precreate_nodes:
                        for node in nodes:
                            file_create_node_id.append(node.identity)
                    print("¿¿¿¿¿¿")
                    print("     ----Check----file_create_node:" + str(len(file_create_node_id)))
                    # ¿¿¿
                    relationships=[]
                    for i,tag in enumerate(tags):
                        if i!=0:
                            relationships.append({'start_node_id': file_create_node_id[i], 'end_node_id': file_create_node_id[0]})
                    relationships.append({'start_node_id': file_create_node_id[-1], 'end_node_id': file_create_node_id[0]})
                    print("     ----Check----relationships_num:"+str(len(relationships)))
                    values=[]
                    for tag in tags:
                        values.append(tag[1])
                    no.create_relationships(graph, relationships,values)
                    print("¿¿¿¿¿")
                if cache_command == "Delete":
                    print("¿¿¿¿")
                    try:
                        print("     ----Check----fileid:"+str(fileid))
                        nodes = matcher.match("File", fileid=fileid)
                        for node in nodes:
                            # print("     ----Check----node:" + str(node))
                            graph.delete(node)
                            print("¿¿¿¿¿¿")
                    except Exception as e:
                        print("¿¿¿¿¿¿:", e)
                    # ¿¿ Cypher ¿¿¿¿¿¿¿¿
                    query = f"MATCH (n:Tag) WHERE NOT ()--(n) RETURN n"
                    result = graph.run(query)
                    # ¿¿¿¿¿¿¿¿¿¿¿
                    for record in result:
                        node = record["n"]
                        print(node)
                        try:
                            graph.delete(node)  # ¿¿¿¿¿¿¿¿¿
                            print("¿¿¿¿¿¿¿¿")
                        except Exception as e:
                            print("¿¿¿¿¿¿¿¿:", e)
                    print("Delete¿¿")
    finally:
        sock.close()
